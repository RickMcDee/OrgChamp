@page "/teams"

@attribute [Authorize]

@inject OrganizationRepository OrganizationRepository
@inject UserService UserService

@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudContainer Class="d-flex justify-center">
    @if (!UserService.User.Teams.Any())
    {
        <MudElement Class="d-flex flex-column mt-10 gap-1">
            <MudText Typo="Typo.body1">You are not part of any team yet.</MudText>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CreateTeam">Create a new team</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="JoinTeam">Join an existing team</MudButton>
        </MudElement>
    }
    else
    {
        <MudElement Class="d-flex flex-column flex-wrap flex-grow-1 align-center mt-10 gap-1">
            <MudText Typo="Typo.body1">You are part of the following teams:</MudText>
            <MudList Style="width: 80%;">
                @foreach (var team in UserService.User.Teams)
                {
                    <MudListItem>
                        <MudCard>
                            <MudCardHeader>
                                <CardHeaderAvatar>
                                    <MudAvatar Color="Color.Secondary">TBD</MudAvatar>
                                </CardHeaderAvatar>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.body1">@team.TeamName</MudText>
                                    <MudText Typo="Typo.body2">@team.TeamDescription?.Shorten(40)</MudText>
                                </CardHeaderContent>
                                <CardHeaderActions>
                                    @if (expandedCards[UserService.User.Teams.IndexOf(team)])
                                    {
                                        <MudIconButton Icon="@Icons.Material.Filled.ExpandLess" Color="Color.Default" OnClick="@(() => ToggleExpandedState(UserService.User.Teams.IndexOf(team)))" />
                                    }
                                    else
                                    {
                                        <MudIconButton Icon="@Icons.Material.Filled.ExpandMore" Color="Color.Default" OnClick="@(() => ToggleExpandedState(UserService.User.Teams.IndexOf(team)))" />
                                    }
                                </CardHeaderActions>
                            </MudCardHeader>
                            @if (expandedCards[UserService.User.Teams.IndexOf(team)])
                            {
                                <MudCardContent>
                                    <MudText Typo="Typo.body2">Team description: </MudText>
                                    <MudText Typo="Typo.body2"> @(team.TeamDescription ?? "No description") </MudText>

                                    <MudText Typo="Typo.body2" Class="mt-4">Team members: </MudText>
                                    <MudList Dense DisablePadding>
                                    @foreach (var member in OrganizationRepository.GetTeamMember(team.TeamId))
                                        {
                                            <MudListItem>
                                                <ChildContent>
                                                    <MudElement Class="d-flex flex-row" Style="margin-bottom: -10px; margin-top: -5px;">
                                                        <MudText Typo="Typo.body2" Class="d-flex flex-wrap-1 align-center mr-2">@member.Name </MudText>
                                                        <MudChip Variant="Variant.Outlined" Color="@GetChipColor(member.Role)" Size="Size.Small" Disabled>@member.Role </MudChip>
                                                </MudElement>
                                            </ChildContent>
                                        </MudListItem>
                                        }
                                    </MudList>

                                </MudCardContent>
                                <MudCardActions>
                                    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(() => LeaveTeam(team))">Leave Team</MudButton>
                                </MudCardActions>
                            }
                        </MudCard>
                    </MudListItem>
                }
            </MudList>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="JoinTeam">Join an additional team</MudButton>
        </MudElement>
    }
</MudContainer>

@code {
    private bool[] expandedCards = default!;

    protected override void OnInitialized()
    {
        CreateExpandedCardsArray();

        base.OnInitialized();
    }

    private void CreateExpandedCardsArray()
    {
        expandedCards = new bool[UserService.User.Teams.Count];
        for (int i = 0; i < expandedCards.Length; i++)
        {
            expandedCards[i] = false;
        }
    }

    private async Task ReloadUsersTeams()
    {
        await UserService.ReloadUserDetails();
        CreateExpandedCardsArray();
        StateHasChanged();
    }

    private async Task CreateTeam()
    {
        var options = new DialogOptions() { MaxWidth = MaxWidth.Medium };
        var dialog = DialogService.Show<AddTeamDialog>("Create a new team", options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await ReloadUsersTeams();
        }
    }

    private async Task JoinTeam()
    {
        var options = new DialogOptions() { MaxWidth = MaxWidth.Medium };
        var dialog = DialogService.Show<JoinTeamDialog>("Join a new team", options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await ReloadUsersTeams();
        }
    }

    private async Task LeaveTeam(TeamViewModel team)
    {
        var result = await DialogService.ShowMessageBox($"You are leaving {team.TeamName}", "All your planning related to this team will be deleted.", yesText: "Leave the team", cancelText: "Cancel");
        if (result.HasValue && result.HasValue)
        {
            try
            {
                await OrganizationRepository.RemoveUserFromTeam(team.TeamId, UserService.UserId);
                Snackbar.Add($"You left the team {team.TeamName}", Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
        }
    }

    private Color GetChipColor(TeamMemberRole role) => role switch
    {
        TeamMemberRole.Owner => Color.Error,
        TeamMemberRole.Administrator => Color.Error,
        TeamMemberRole.Member => Color.Success,
        TeamMemberRole.Guest => Color.Dark,
        _ => Color.Dark
    };

    private void ToggleExpandedState(int index)
    {
        expandedCards[index] = !expandedCards[index];
    }
}
